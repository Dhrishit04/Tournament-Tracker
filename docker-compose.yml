# Define the services (containers) for the application.
services:
  # The Next.js Frontend Service
  frontend:
    # Build the image using the Dockerfile in the root directory.
    build:
      context: .
      dockerfile: Dockerfile
      # Target the 'deps' stage for a development environment with all node_modules.
      target: deps
    # Name the container for easier identification.
    container_name: tournament-tracker-frontend
    # Forward local port 3000 to the container's port 3000.
    ports:
      - "3000:3000"
    # Mount the local directory into the container for live reloading.
    volumes:
      - .:/app
      - /app/node_modules
    # Use the development command to run the Next.js dev server.
    command: npm run dev
  # The Java Spring Boot Backend Service
  backend:
    # Build the image using the Dockerfile inside the 'backend' directory.
    build:
      context: ./backend
      dockerfile: Dockerfile
      # Target the 'builder' stage, which has Maven and the full JDK.
      target: builder
    # Name the container.
    container_name: tournament-tracker-backend
    # Forward local port 8080 to the container's port 8080.
    ports:
      - "8080:8080"
    # Mount the backend source code for live reloading with spring-boot-devtools.
    volumes:
      - ./backend:/app
      # Cache maven dependencies to speed up subsequent builds
      - ~/.m2:/root/.m2
    # Override the Dockerfile's ENTRYPOINT and run the development server.
    command: mvn spring-boot:run
